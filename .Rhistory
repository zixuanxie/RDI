# Check and install required Python modules
if (!py_available()) {
print("Python is still not installed. Please install Python first (version >= 3).")
# quit(save = "no", status = 1)
}
# Check if Python is available
library(reticulate)
# Check and install required Python modules
if (!py_available()) {
print("Python is still not installed. Please install Python first (version >= 3).")
# quit(save = "no", status = 1)
}
system(python)
system("python")
system("python --version")
py_available()
py_run_string("import sys\nsys.version")
# You can also print the Python version if needed
python_version <- as.numeric(strsplit(py_run_string("import sys\nsys.version"), split = "\n")[[1]])
py_available(TRUE)
Sys.which("python")
use_python("C:\\Users\\zixuan.xie\\AppData\\Local\\Programs\\Python\\Python38\\python.exe", required = T)
py_available()
# You can also print the Python version if needed
python_version <- as.numeric(strsplit(py_run_string("import sys\nsys.version"), split = "\n")[[1]])
py_run_string("import sys\nsys.version")
if (py_available()) {
print("Python is installed.")
# You can also print the Python version if needed
python_version <- as.numeric(strsplit(py_run_string("import sys\nsys.version"), split = "\n")[[1]])
if (python_version < 3) {
print("Please install Python 3 or a higher version.")
quit(save = "no", status = 1)
}
} else {
print("Python is not installed, attempting to install Python 3.8.")
if (Sys.info()['sysname'] == "Windows") {
print("Please install Python following this instruction: https://www.digitalocean.com/community/tutorials/install-python-windows-10")
} else if (Sys.info()['sysname'] == "Linux") {
# Update package information
system("sudo apt-get update")
# Install Python 3.8
system("sudo apt-get install -y python3.8")
} else if (Sys.info()['sysname'] == "Darwin") {
# Install Python 3.8 using Homebrew on macOS
system("brew install python@3.8")
} else {
print("Unsupported operating system.")
# quit(save = "no", status = 1)
}
}
devtools::document()
create_index("extdata/test.fasta", "tests/testoutput/test.fa")
#' @title Create kallisto Index
#' @description Function to create the reference transcript and the indexed reference transcript
#' @param fasta_file Path to the input the original reference transcript, in fasta format
#' @param output_prefix Path to the generated reference transcript
#' @return Outputs the kallisto index that will be used for calculating RDI
#' @examples
#' create_index(fasta_file, output_prefix)
#' @export
create_index <- function(fasta_file, output_prefix) {
system(paste("python ../inst/scripts/python/create_index.py --input", fasta_file,
"--output", paste(output_prefix, ".fa", sep = "")))
if (Sys.info()['sysname'] == "Windows") {
system(paste("../exec/kallisto_windows-v0.46.1/kallisto.exe index -i",
shQuote(paste(output_prefix, ".idx", sep = "")),
paste(output_prefix, ".fa", sep = "")))
} else if (Sys.info()['sysname'] == "Linux") {
system(paste("../exec/kallisto_linux-v0.46.1/kallisto index -i",
shQuote(paste(output_prefix, ".idx", sep = "")),
paste(output_prefix, ".fa", sep = "")))
} else if (Sys.info()['sysname'] == "Darwin"){
system(paste("../exec/kallisto_mac-v0.46.1/kallisto index -i",
shQuote(paste(output_prefix, ".idx", sep = "")),
paste(output_prefix, ".fa", sep = "")))
}
}
create_index("extdata/test.fasta", "tests/testoutput/test.fa")
getwd()
setwd("C:/Users/zixuan.xie/OneDrive - Crown Bioscience Inc/Documents/PROJECTS/RNA_DEGRADATION/SCRIPTS/RDI/RDI/R")
create_index("extdata/test.fasta", "tests/testoutput/test.fa")
create_index("../extdata/test.fasta", "../tests/testoutput/test.fa")
create_index("../extdata/test.fasta", "../tests/testoutput/test")
#' @description Function to calculate RDI
#' @param fq_file1 Path to the first RNAseq fq.gz file
#' @param fq_file2 Path to the second RNAseq fq.gz file
#' @param index_path Path to the Kallisto index
#' @param num_threads Number of threads to use
#' @param output Path to the output directory
#' @return Outputs two files: RDI for each transcript, and the RDI for the sample
#' @examples
#' calculate_RDI(fq_file1, fq_file2, index_path, num_threads, output_dir)
#' @export
calculate_RDI <- function(fq_file1, fq_file2, index_path, num_threads, output_dir) {
if (Sys.info()['sysname'] == "Windows") {
system(paste("../exec/kallisto_windows-v0.46.1/kallisto.exe quant -i",
index_path, "-o", output_dir, "-b 100 -t", num_threads,
fq_file1, fq_file2))
} else if (Sys.info()['sysname'] == "Linux") {
system(paste("../exec/kallisto_linux-v0.46.1/kallisto quant -i",
index_path, "-o", output_dir, "-b 100 -t", num_threads,
fq_file1, fq_file2))
} else if (Sys.info()['sysname'] == "Darwin"){
system(paste("../exec/kallisto_mac-v0.46.1/kallisto quant -i",
index_path, "-o", output_dir, "-b 100 -t", num_threads,
fq_file1, fq_file2))
}
system(paste("python ../inst/scripts/python/calculate_RDI.py --input",
paste(output_dir,"/abundance.tsv", sep = ""),
"--output1", paste(output_dir,"/transcripts_RDI.tsv",sep = ""),
"--output2", paste(output_dir,"/RDI_sum.tsv",sep = "")))
}
calculate_RDI("../extdata/test1.fq.gz", "../extdata/test2.fq.gz", "../tests/testoutput/test.idx", 12, "../tests/testoutput/test")
devtools::document()
# Check and install required Python modules
required_modules <- c("Bio", "random", "argparse", "pandas", "numpy", "os", "math")
for (module in required_modules) {
if (!py_module_available(module)) {
cat(paste("Installing missing module:", module, "\n"))
py_install(module, pip = TRUE)
} else {
print(paste("Good,", module,"is installed."))
}
}
module
py_module_available(module)
cat(paste("Installing missing module:", module, "\n"))
py_install(module, pip = TRUE)
python_version <- system("python --version") %>% strsplit(split = "Python ")[[2]]
python_version <- strsplit(system("python --version"),split = "Python ")[[2]]
python_version <- system("python --version")
python_version
python_version <- system("python --version", intern = T)
python_version <- strsplit(system("python --version", intern = T),split = "Python ")[[2]]
strsplit(system("python --version", intern = T),split = "Python ")
python_version <- strsplit(system("python --version", intern = T),split = "Python ")[[1]]
python_version <- strsplit(system("python --version", intern = T),split = "Python ")[1][2]
View(python_version)
python_version <- strsplit(system("python --version", intern = T),split = "Python ")[1][1]
python_version <- strsplit(system("python --version", intern = T),split = "Python ")[1]
python_version
View(python_version)
python_version <- as.numeric(strsplit(system("python --version", intern = T),split = "Python ")[1])
python_version <- as.numeric(strsplit(system("python --version", intern = T),split = "Python ")[[1]])
gsub("Python ","",system("python --version", intern = T))
python_version <- as.numeric(gsub("Python ","",system("python --version", intern = T)))
gsub("Python ","",system("python --version", intern = T))
gsub("Python ","",system("python --version", intern = T))[1]
python_version <- as.numeric(gsub("Python ","",system("python --version", intern = T))[1])
as.numeric(gsub("Python ","",system("python --version", intern = T))[1])
gsub("Python ","",system("python --version", intern = T))[1]
python_version="3.8.1"
python_version
as.numeric(python_version)
startsWith(python_version,"3")
python_version <- system("python --version", intern = T)
python_version <- as.numeric(gsub("Python ","",system("python --version", intern = T)))
python_version <- gsub("Python ","",system("python --version", intern = T))
startsWith(python_version,"3")
python_version="2.8.1"
startsWith(python_version,"3")
python_version <- gsub("Python ","",system("python --version", intern = T))
module
py_module_available(module)
py_module_available("pandas")
py_available()
module_name <- "numpy"
# Create a temporary Python script to check for the module
check_module_script <- sprintf("try:\n    import %s\n    print('Module available')\nexcept ImportError:\n    print('Module not available')\n", module_name)
# Write the script to a temporary file
script_file <- tempfile(fileext = ".py")
writeLines(check_module_script, script_file)
# Run the Python script using system command
result <- system(sprintf("python %s", script_file), intern = TRUE)
# Print the result
cat(result, sep = "\n")
# Delete the temporary script file
unlink(script_file)
py_module_available("numpy")
check_module_script
check_module <- function(module_name){
# Create a temporary Python script to check for the module
check_module_script <- sprintf("try:\n    import %s\n    print('Module available')\nexcept ImportError:\n    print('Module not available')\n", module_name)
# Write the script to a temporary file
script_file <- tempfile(fileext = ".py")
writeLines(check_module_script, script_file)
# Run the Python script using system command
result <- system(sprintf("python %s", script_file), intern = TRUE)
# Print the result
cat(result, sep = "\n")
# Delete the temporary script file
unlink(script_file)
}
module_name <- "Bio"
check_module("BIO")
check_module("Bio")
check_module("pandas")
check_module("pandas")
check_module("pandas") == "Module not available"
#Function for checking Python module
check_module <- function(module_name){
# Create a temporary Python script to check for the module
check_module_script <- sprintf("try:\n    import %s\n    print('Module available')\nexcept ImportError:\n    print('Module not available')\n", module_name)
# Write the script to a temporary file
script_file <- tempfile(fileext = ".py")
writeLines(check_module_script, script_file)
# Run the Python script using system command
result <- system(sprintf("python %s", script_file), intern = TRUE)
# Print the result
return(result, sep = "\n")
# Delete the temporary script file
unlink(script_file)
}
check_module("pandas") == "Module not available"
#Function for checking Python module
check_module <- function(module_name){
# Create a temporary Python script to check for the module
check_module_script <- sprintf("try:\n    import %s\n    print('Module available')\nexcept ImportError:\n    print('Module not available')\n", module_name)
# Write the script to a temporary file
script_file <- tempfile(fileext = ".py")
writeLines(check_module_script, script_file)
# Run the Python script using system command
result <- system(sprintf("python %s", script_file), intern = TRUE)
# Print the result
# return(result, sep = "\n")
return(result)
# Delete the temporary script file
unlink(script_file)
}
check_module("pandas") == "Module not available"
check_module("pandas")
check_module("pandas") == "Module available"
check_module("Bio") == "Module not available"
print("Waining: Python3 is required, please install before using RDI package")
source("~/PROJECTS/RNA_DEGRADATION/SCRIPTS/RDI/RDI/R/install.R")
source("~/PROJECTS/RNA_DEGRADATION/SCRIPTS/RDI/RDI/R/install.R")
required_modules
missing_dependencies=c()
for (module in required_modules) {
if (check_module(module) == "Module not available"){
missing_dependencies <- append(missing_dependencies, module)
}
}
missing_dependencies
system("../exec/kallisto_windows-v0.46.1/kallisto.exe")
system("kallisto")
system("kalli")
system("../exec/kallisto_windows-v0.46.1/kallisto.exe", intern = T)
system("../exec/kallisto_windows-v0.46.1/kallisto.exe")
source("~/PROJECTS/RNA_DEGRADATION/SCRIPTS/RDI/RDI/R/install.R")
source("~/PROJECTS/RNA_DEGRADATION/SCRIPTS/RDI/RDI/R/install.R")
source("~/PROJECTS/RNA_DEGRADATION/SCRIPTS/RDI/RDI/R/install.R")
devtools::document()
devtools::document()
calculate_RDI("../extdata/test1.fq.gz", "../extdata/test2.fq.gz", ",,/tests/testoutput/test.idx", num_threads = 20, output_dir = "../tests/testoutput/test")
calculate_RDI("../extdata/test1.fq.gz", "../extdata/test2.fq.gz", "../tests/testoutput/test.idx", num_threads = 20, output_dir = "../tests/testoutput/test")
mean
devtools:::build()
use_namespace()
library(usethis)
use_namespace()
devtools::document()
roxygen2::roxygenise()
roxygen2::roxygenise("../")
setwd("../")
getwd()
devtools::document()
devtools::install()
?mean
library(ggplot2)
usethis::use_gpl3_license()
usethis::use_gpl3_license()
devtools::document()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::check()
library(RDI)
?calculate_RDI()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::check()
devtools::check()
usethis::use_mit_license()
devtools::build()
package_root <- system.file(package = "RDI")
paste("python", paste(package_root,"/inst/scripts/python/create_index.py --input", sep = ""), fasta_file,
"--output", paste(output_prefix, ".fa", sep = ""))
paste(package_root,"/inst/scripts/python/create_index.py --input", sep = "")
package_root
devtools::build()
devtools::build()
devtools::build()
paste("chmod +x", paste(package_root,"/scripts/kallisto_windows-v0.46.1/kallisto.exe index -i", sep = ""))
devtools::build()
devtools::build()
devtools::build()
devtools::build()
install.packages("data.table")
